name: CI
on: [push, pull_request]
env:
  DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
permissions:
  actions: write
  checks: write
  contents: write
  deployments: write
  id-token: write
  issues: write
  discussions: write
  packages: write
  pages: write
  pull-requests: write
  repository-projects: write
  security-events: write
  statuses: write

jobs:
  linter:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          path: modules
      - uses: leafo/gh-actions-lua@v8.0.0
        with:
          luaVersion: 5.2
      - uses: leafo/gh-actions-luarocks@v4.0.0
      - uses: actions/checkout@v3
        with:
          repository: LiliaFramework/GluaCheck
          path: luacheck
      - run: luarocks make
        working-directory: luacheck
      - run: |
          luacheck . \
            --no-redefined \
            --no-global --no-self \
            --no-max-line-length --no-max-code-line-length \
            --no-max-string-line-length --no-max-comment-line-length
        working-directory: modules

  scrape-modules:
    needs: linter
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - run: sudo apt-get update && sudo apt-get install -y jq zip
      - run: |
          echo "[]" > modules.json
          for module in */module.lua; do
            [ -f "$module" ] || continue
            name=$(grep -Po 'MODULE\.name\s*=\s*"[^"]*"' "$module" | sed -E 's/.*=\s*"([^"]+)".*/\1/' || echo "")
            author=$(grep -Po 'MODULE\.discord\s*=\s*"[^"]*"' "$module" | sed -E 's/.*=\s*"([^"]+)".*/\1/' || echo "")
            desc=$(grep -Po 'MODULE\.desc\s*=\s*"[^"]*"' "$module" | sed -E 's/.*=\s*"([^"]+)".*/\1/' || echo "")
            version=$(grep -Po 'MODULE\.version\s*=\s*"[^"]*"' "$module" | sed -E 's/.*=\s*"([^"]+)".*/\1/' "$module" || echo "1.0")
            workshop_line=$(grep -Po 'MODULE\.WorkshopContent\s*=\s*(\{[^}]*\}|".*")' "$module" || echo "")
            workshop_line=$(echo "$workshop_line" | sed -E 's/MODULE\.WorkshopContent\s*=\s*//g')
            if [[ "$workshop_line" =~ ^\{.*\}$ ]]; then
              workshop_line=$(echo "$workshop_line" | sed -E 's/^\{\s*(.*)\s*\}$/[\1]/' | sed -E 's/"\s*,\s*"/","/g')
            elif [ -n "$workshop_line" ]; then
              workshop_line="[${workshop_line}]"
            else
              workshop_line="[]"
            fi
            folder=$(basename "$(dirname "$module")")
            uniqueID=$folder
            download="https://github.com/LiliaFramework/Modules/raw/refs/heads/gh-pages/Downloads/${folder}.zip"
            source="https://liliaframework.github.io/Modules/${folder}.html"
            jq --arg name "$name" \
               --arg author "$author" \
               --arg desc "$desc" \
               --arg version "$version" \
               --arg download "$download" \
               --arg source "$source" \
               --arg uniqueID "$uniqueID" \
               --argjson workshop "$workshop_line" \
               '. += [{name:$name,author:$author,description:$desc,version:$version,download:$download,source:$source,uniqueID:$uniqueID,workshop:$workshop}]' modules.json > tmp.json
            mv tmp.json modules.json
          done
      - run: |
          git fetch origin main --depth=1
          git show origin/main:modules.json > old_modules.json 2>/dev/null || echo "[]" > old_modules.json
          jq -r '.[] | "\(.uniqueID):\(.version)"' old_modules.json > old_versions.txt
          jq -r '.[] | "\(.uniqueID):\(.version)"' modules.json > new_versions.txt
          awk -F: 'NR==FNR { m[$1]=$2; next } m[$1] != $2 { print $1 " updated from " m[$1] " to " $2 }' old_versions.txt new_versions.txt > changes.txt
          if [ -s changes.txt ]; then
            payload="{\"content\":\"Module versions updated:\n$(sed ':a;N;$!ba;s/\n/\\n/g' changes.txt)\"}"
            curl -X POST -H "Content-Type: application/json" -d "$payload" $DISCORD_WEBHOOK_URL
          fi
      - run: |
          git config user.email "githubactions@github.com"
          git config user.name "GitHub Actions"
          git add modules.json
          if ! git diff --cached --quiet; then
            git commit -m "Update modules.json with source URLs"
            git push https://${{ secrets.LiliaGitSecret }}@github.com/${{ github.repository }}.git main
          fi

  gh-pages:
    needs: scrape-modules
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/download-artifact@v4
        with:
          name: module-zips
          path: docs/Downloads
      - run: |
          for zip in docs/Downloads/*.zip; do
            folder=$(basename "$zip" .zip)
            unzip "$zip" -d "extracted_${folder}"
          done
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - run: node docsparser.js
      - uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.LiliaGitSecret }}
          publish_branch: gh-pages
          publish_dir: ./docs
          force_orphan: true
      - run: |
          curl -X POST -H "Content-Type: application/json" -d "{\"content\":\"The documentation site has just been updated on gh-pages.\"}" $DISCORD_WEBHOOK_URL

  release:
    needs: gh-pages
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          path: modules
      - uses: actions/github-script@v6
        with:
          script: |
            const tag = 'release';
            try {
              const release = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag
              });
              await github.rest.repos.deleteRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.data.id
              });
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `tags/${tag}`
              });
            } catch (error) {
            }
      - run: |
          mkdir packaged
          cp -R modules packaged/modules
          cd packaged
          zip -r ../modules.zip modules
      - id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: release
          release_name: Modules
        env:
          GITHUB_TOKEN: ${{ secrets.LiliaGitSecret }}
      - uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: modules.zip
          asset_name: modules.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.LiliaGitSecret }}