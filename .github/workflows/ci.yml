name: CI

on:
  push:
    branches:
      - main

permissions:
  actions: write
  checks: write
  contents: write
  deployments: write
  id-token: write
  issues: write
  discussions: write
  packages: write
  pages: write
  pull-requests: write
  repository-projects: write
  security-events: write
  statuses: write

jobs:
  linter:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          path: modules
      - uses: leafo/gh-actions-lua@v8.0.0
        with:
          luaVersion: 5.2
      - uses: leafo/gh-actions-luarocks@v4.0.0
      - uses: actions/checkout@v3
        with:
          repository: LiliaFramework/GluaCheck
          path: luacheck
      - run: luarocks make
        working-directory: luacheck
      - run: |
          luacheck . \
            --no-redefined \
            --no-global --no-self \
            --no-max-line-length --no-max-code-line-length \
            --no-max-string-line-length --no-max-comment-line-length
        working-directory: modules

  scrape-modules:
    needs: linter
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: main
      - run: sudo apt-get update && sudo apt-get install -y jq zip
      - run: |
          echo "[]" > modules.json
          for module in */module.lua; do
            [ -f "$module" ] || continue
            name=$(grep -Po 'MODULE\.name\s*=\s*"[^"]*"' "$module" | sed -E 's/.*=\s*"([^"]+)".*/\1/')
            author=$(grep -Po 'MODULE\.author\s*=\s*"[^"]*"' "$module" | sed -E 's/.*=\s*"([^"]+)".*/\1/')
            discord=$(grep -Po 'MODULE\.discord\s*=\s*"[^"]*"' "$module" | sed -E 's/.*=\s*"([^"]+)".*/\1/')
            desc=$(grep -Po 'MODULE\.desc\s*=\s*"[^"]*"' "$module" | sed -E 's/.*=\s*"([^"]+)".*/\1/')
            version=$(grep -Po 'MODULE\.version\s*=\s*"[^"]*"' "$module" | sed -E 's/.*=\s*"([^"]+)".*/\1/' || echo "1.0")

            raw_features=$(grep -Po 'MODULE\.Features\s*=\s*(\{[^}]*\}|"[^"]*")' "$module" | head -n1 | sed -E 's/MODULE\.Features\s*=\s*//')
            if [ -n "$raw_features" ]; then
              if [[ $raw_features == \{* ]]; then
                raw_features=$(echo "$raw_features" | sed -E 's/,\s*}$/}/')
                features_line=$(echo "$raw_features" | sed -E 's/^\{(.*)\}$/[\1]/')
              else
                features_line="[$raw_features]"
              fi
            else
              features_line="[]"
            fi

            raw_workshop=$(grep -Po 'MODULE\.WorkshopContent\s*=\s*(\{[^}]*\}|"[^"]*")' "$module" | head -n1 | sed -E 's/MODULE\.WorkshopContent\s*=\s*//')
            if [ -n "$raw_workshop" ]; then
              if [[ $raw_workshop == \{* ]]; then
                raw_workshop=$(echo "$raw_workshop" | sed -E 's/,\s*}$/}/')
                workshop_line=$(echo "$raw_workshop" | sed -E 's/^\{(.*)\}$/[\1]/')
              else
                workshop_line="[$raw_workshop]"
              fi
            else
              workshop_line="[]"
            fi

            folder=$(basename "$(dirname "$module")")
            public_uniqueID=$folder
            download="https://github.com/LiliaFramework/Modules/raw/refs/heads/gh-pages/Downloads/${folder}.zip"
            source="https://liliaframework.github.io/Modules/${folder}.html"

            jq --arg name "$name" \
               --arg author "$author" \
               --arg discord "$discord" \
               --arg desc "$desc" \
               --arg version "$version" \
               --arg download "$download" \
               --arg source "$source" \
               --arg public_uniqueID "$public_uniqueID" \
               --argjson features "$features_line" \
               --argjson workshop "$workshop_line" \
               '. += [{name:$name,author:$author,discord:$discord,description:$desc,version:$version,download:$download,source:$source,public_uniqueID:$public_uniqueID,features:$features,workshop:$workshop}]' modules.json > tmp.json
            mv tmp.json modules.json
          done
      - run: |
          for folder in */; do
            [ -d "$folder" ] && zip -r "${folder%/}.zip" "$folder"
          done
      - run: node scrap_modules.js
      - run: |
          git config user.email "githubactions@github.com"
          git config user.name "GitHub Actions"
          git checkout -B gh-pages
          git add -f modules.json hi.md
          if ! git diff --cached --quiet; then
            git commit -m "Update modules.json with source URLs"
            git push -f https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git gh-pages
          fi
      - uses: actions/upload-artifact@v4
        with:
          name: module-zips
          path: ./*.zip
      - uses: actions/upload-artifact@v4
        with:
          name: modules-json
          path: modules.json

  gh-pages:
    needs: scrape-modules
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/download-artifact@v4
        with:
          name: module-zips
          path: docs/Downloads
      - uses: actions/download-artifact@v4
        with:
          name: modules-json
          path: .
      - run: |
          for zip in docs/Downloads/*.zip; do
            folder=$(basename "$zip" .zip)
            unzip "$zip" -d "extracted_${folder}"
          done
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - run: node docsparser.js
      - run: cp modules.json docs/modules.json
      - uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.LiliaGitSecret }}
          publish_branch: gh-pages
          publish_dir: docs
          force_orphan: true

  release:
    needs: gh-pages
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          path: modules
      - uses: actions/github-script@v6
        with:
          script: |
            const tag = 'release'
            try {
              const release = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag
              })
              await github.rest.repos.deleteRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.data.id
              })
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `tags/${tag}`
              })
            } catch (error) {
              if (error.status !== 404) throw error
            }
      - run: |
          mkdir packaged
          cp -R modules packaged/modules
          cd packaged
          zip -r ../modules.zip modules
      - uses: actions/create-release@v1
        id: create_release
        with:
          tag_name: release
          release_name: Modules
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.LiliaGitSecret }}
      - uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: modules.zip
          asset_name: modules.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.LiliaGitSecret }}